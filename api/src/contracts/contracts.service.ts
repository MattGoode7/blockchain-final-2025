import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Web3Service } from '../web3/web3.service';
import { Contract, Signer } from 'ethers';
import * as cfpFactoryAbi from './abi/CFPFactory.json';
import * as cfpAbi from './abi/CFP.json';

@Injectable()
export class ContractsService {
  private readonly factoryContract: Contract;

  constructor(
    private readonly configService: ConfigService,
    private readonly web3Service: Web3Service,
  ) {
    const networkId = this.configService.get<string>('NETWORK_ID', '5777');

    // ABI files generated by truffle/artifact contain networks mapping; we only need abi field, but we may also want address.
    // However, the ABI json here (exported) includes all fields. We cast accordingly.
    const factoryAddress = (cfpFactoryAbi as any).networks?.[networkId]?.address;
    if (!factoryAddress) {
      throw new Error('No se encontró la dirección del CFPFactory para la red seleccionada');
    }

    const signer: Signer = this.web3Service.getWallet();
    this.factoryContract = new Contract(factoryAddress, (cfpFactoryAbi as any).abi ?? cfpFactoryAbi, signer);
  }

  getFactory(): Contract {
    return this.factoryContract;
  }

  /* Devuelve instancia de CFP dado un callId */
  async getCfpById(callId: string): Promise<{ contract: Contract; address: string }> {
    const callData = await this.factoryContract.calls(callId);
    const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';
    if (callData[0] === ZERO_ADDRESS) {
      throw new Error('CALLID_NOT_FOUND');
    }

    const cfpAddress = callData[1];
    const signer: Signer = this.web3Service.getWallet();
    const contract = new Contract(cfpAddress, (cfpAbi as any).abi ?? cfpAbi, signer);
    return { contract, address: cfpAddress };
  }
} 